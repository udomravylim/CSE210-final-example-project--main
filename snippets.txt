/// <summary>
/// <para>
/// A distinguishing quality or characteristic.
/// </para>
/// <para>
/// The responsibility of Trait is to provide additional run-time type information for 
/// inheriting classes. A class implements the Trait interface to indicate that Cast and Actor
/// methods can legally operate on or use it.
/// </para>
/// <remarks>
/// So-called marker interfaces like this one are often considered a code smell because they
/// don't define any new behavior. However, they are sometimes very useful in rounding out, thus 
/// strengthening, our understanding of the object model. We made the choice to include it here
/// because our understanding of Actors would be weakened without it.
/// </remarks>
/// </summary>

----------------------------------------------------------------------------------------------------

using System.Collections.Generic;


namespace Unit99.Core.Casting
{
    /// <summary>
    /// <para>
    /// Something that receives Actor events.
    /// </para>
    /// <para>
    /// The responsibility of IActorListener is to define the methods for responding to changes in 
    /// an Actor instance.
    /// </para>
    /// </summary>
    public interface IActorListener
    {
        /// <summary>
        /// Invoked when a trait is added to an Actor instance.
        /// </summary>
        /// <param name="type">The type of trait that was added.</param>
        void OnTraitAdded(Type type);

        /// <summary>
        /// Invoked when a trait is removed from an Actor instance.
        /// </summary>
        /// <param name="type">The type of trait that was removed.</param>
        void OnTraitRemoved(Type type);
    }
}

----------------------------------------------------------------------------------------------------

/// <summary>
/// Attaches the specified listener to actor.
/// </summary>
/// <param name="listener">The listener to notify when an event happens.</param>
public void AttachListener(IActorListener listener)
{
    _listener = listener;
}

/// <summary>
/// Detaches the actor's listener.
/// </summary>
public void DetachListener()
{
    _listener = null;
}

----------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;


namespace Byui.Game.Casting
{
    /// <summary>
    /// <para>
    /// All of the actors in a scene.
    /// </para>
    /// <para>
    /// The responsibility of Cast is to maintain a collection of actors in a scene.
    /// </para>
    /// </summary>
    public class Cast : IActorListener
    {
        private Dictionary<Type, List<Actor>> _actors = new Dictionary<Type, List<Actor>>();

        /// <summary>
        /// Constructs a new instance of Cast.
        /// </summary>
        public Cast()
        {
        }

        /// <summary>
        /// Adds the specified actor to the Cast. 
        /// </summary>
        /// <param name="actor">The actor to add.</param>
        public void Add(Actor actor)
        {
            List<Type> traitTypes = actor.GetTraitTypes();
            foreach (Type traitType in traitTypes)
            {
                List<Actor> actors = _actors[traitType];
                if (!actors.Contains(actor))
                {
                    actors.Add(actor);
                    actor.SetListener(this);
                }
            }
        }

        /// <summary>
        /// Gets all the actors that have the specified trait type. If no actors with the trait are 
        /// found an empty list is returned.
        /// </summary>
        /// <typeparam name="T">The trait type to look for.</typeparam>
        /// <returns>All the actors with the specified trait.</returns>
        public async List<Actor> GetActorsWith<T>() where T : Trait
        {
            return GetActorsWith(T);
        }

        /// <summary>
        /// Gets all the actors that have the specified trait type. If no actors with the trait are 
        /// found an empty list is returned.
        /// </summary>
        /// <param name="traitType">The trait type to look for.</param>
        /// <returns>All the actors with the specified trait.</returns>
        public List<Actor> GetActorsWith(T traitType) where T : Trait
        {
            List<Actor> results = new List<Actor>();
            if (_actors.ContainsKey(traitType))
            {
                List<Actor> actors = _actors[traitType];
                results = new List<Actor>(actors);
            }
            return results;
        }

        /// <summary>
        /// Gets the first actor that has the specified trait type. 
        /// </summary>
        /// <typeparam name="T">The trait type to look for.</typeparam>
        /// <returns>The first actor with the specified trait.</returns>
        /// <exception cref="ArgumentException">If no actor with the trait type exists.</exception>
        public Actor GetFirstActorWith<T>() where T : Trait
        {
            return GetFirstActorWith(T);
        }

        /// <summary>
        /// Gets the first actor that has the specified trait type. 
        /// </summary>
        /// <param name="traitType">The trait type to look for.</param>
        /// <returns>The first actor with the specified trait.</returns>
        /// <exception cref="ArgumentException">If no actor with the trait type exists.</exception>
        public Actor GetFirstActorWith(T traitType) where T : Trait
        {
            List<Actor> actors = GetActorsWith(traitType);
            if (actors.Count == 0)
            {
                throw new ArgumentException($"no actor found with {traitType} trait");
            }
            return actors[0];
        }

        /// <summary>
        /// Removes the actor from the Cast.
        /// </summary>
        /// <param name="actor">The actor to remove from the cast.</param>
        public void Remove(Actor actor)
        {
            List<Type> traitTypes = actor.GetTraitTypes();
            foreach (Type traitType in traitTypes)
            {
                List<Actor> actors = _actors[traitType];
                actors.Remove(actor);
            }
            actor.DetachListener();
        }
    }
}

----------------------------------------------------------------------------------------------------

using Unit06.Game.Casting;


namespace Unit06.Game.Scripting 
{
    /// <summary>
    /// A callback that can be used to trigger scene changes.
    /// </summary>
    public abstract class ActionCallback
    {
        /// <summary>
        /// Called when we need to transition from one scene to the next.
        /// </summary>
        /// <param name="sceneName">The next scene.</param>
        void OnNextScene(string sceneName);
    }
}

----------------------------------------------------------------------------------------------------

public ApplyTo(Body body)
        {
            Point position = body.GetPosition();
            Point size = body.GetSize();
            Point topLeft = _region.GetTopLeft();
            Point bottomRight = _region.GetBottomRight().Subtract(size);

            int x = position.GetX();
            int y = position.GetY();
            int maxX = bottomRight.GetX();
            int maxY = bottomRight.GetY();
            int minX = topLeft.GetX();
            int minY = topLeft.GetY();

            x = Math.Clamp(x, minX, maxX);
            y = Math.Clamp(y, minY, maxY);

            position = new Point(x, y);
            body.MoveTo(newPosition);
        }


public int GetRotation()
        {
            return _rotation;
        }








using System;
using System.Numerics;

namespace Byui.Games.Casting
{
    /// <summary>
    /// A distance from a relative origin.
    /// </summary>
    public class Point
    {
        private int _x = 0;
        private int _y = 0;

        public Point() { }
        
        public Point(int x, int y)
        {
            _x = x;
            _y = y;
        }

        public Point Add(Point other)
        {
            int x = _x + other.GetX();
            int y = _y + other.GetY();
            return new Point(x, y);
        }

        public Point Copy()
        {
            return new Point(_x, _y);
        }

        public Point DivideBy(int factor)
        {
            int x = _x / factor;
            int y = _y / factor;
            return new Point(x, y);
        }

        public override bool Equals(object other)
        {
            return Equals(other as Point);
        }

        public bool Equals(Point other)
        {
            return _x == other.GetX() && _y == other.GetY();
        }

        public override int GetHashCode()
        {
            return HashCode.Combine(_x, _y);
        }

        public int GetX()
        {
            return _x;
        }

        public int GetY()
        {
            return _y;
        }

        public Point Interpolate(Point other, double alpha)
        {
            Point a = this.MultiplyBy(alpha);
            Point b = other.MultiplyBy(1.0 - alpha);
            return a.Add(b);
        }

        public Point Invert()
        {
            int x = _x * -1;
            int y = _y * -1;
            return new Point(x, y);
        }

        public Point MultiplyBy(double factor)
        {
            int x = (int)(_x * factor);
            int y = (int)(_y * factor);
            return new Point(x, y);
        }

        public Point Subtract(Point other)
        {
            int x = _x - other.GetX();
            int y = _y - other.GetY();
            return new Point(x, y);
        }

        public Vector2 ToVector()
        {
            return new Vector2(_x, _y);
        }
    }
}





/// <summary>
        /// Enumerates all lines for given section.
        /// </summary>
        /// <param name="sectionName">Section to enum.</param>
        public String[] EnumerateSection(String sectionName)
        {
            ArrayList tmpArray = new ArrayList();

            foreach (SectionPair pair in keyPairs.Keys)
            {
                if (pair.Section == sectionName.ToUpper())
                    tmpArray.Add(pair.Key);
            }

            return (String[])tmpArray.ToArray(typeof(String));
        }

        /// <summary>
        /// Adds or replaces a setting to the table to be saved.
        /// </summary>
        /// <param name="sectionName">Section to add under.</param>
        /// <param name="settingName">Key name to add.</param>
        /// <param name="settingValue">Value of key.</param>
        public void AddSetting(String sectionName, String settingName, String settingValue)
        {
            SectionPair sectionPair;
            sectionPair.Section = sectionName.ToUpper();
            sectionPair.Key = settingName.ToUpper();

            if (keyPairs.ContainsKey(sectionPair))
                keyPairs.Remove(sectionPair);

            keyPairs.Add(sectionPair, settingValue);
        }

        /// <summary>
        /// Adds or replaces a setting to the table to be saved with a null value.
        /// </summary>
        /// <param name="sectionName">Section to add under.</param>
        /// <param name="settingName">Key name to add.</param>
        public void AddSetting(String sectionName, String settingName)
        {
            AddSetting(sectionName, settingName, null);
        }

        /// <summary>
        /// Remove a setting.
        /// </summary>
        /// <param name="sectionName">Section to add under.</param>
        /// <param name="settingName">Key name to add.</param>
        public void DeleteSetting(String sectionName, String settingName)
        {
            SectionPair sectionPair;
            sectionPair.Section = sectionName.ToUpper();
            sectionPair.Key = settingName.ToUpper();

            if (keyPairs.ContainsKey(sectionPair))
                keyPairs.Remove(sectionPair);
        }

        /// <summary>
        /// Save settings to new file.
        /// </summary>
        /// <param name="newFilePath">New file path.</param>
        public void SaveSettings(String newFilePath)
        {
            ArrayList sections = new ArrayList();
            String tmpValue = "";
            String strToSave = "";

            foreach (SectionPair sectionPair in keyPairs.Keys)
            {
                if (!sections.Contains(sectionPair.Section))
                    sections.Add(sectionPair.Section);
            }

            foreach (String section in sections)
            {
                strToSave += ("[" + section + "]\r\n");

                foreach (SectionPair sectionPair in keyPairs.Keys)
                {
                    if (sectionPair.Section == section)
                    {
                        tmpValue = (String)keyPairs[sectionPair];

                        if (tmpValue != null)
                            tmpValue = "=" + tmpValue;

                        strToSave += (sectionPair.Key + tmpValue + "\r\n");
                    }
                }

                strToSave += "\r\n";
            }

            try
            {
                TextWriter tw = new StreamWriter(newFilePath);
                tw.Write(strToSave);
                tw.Close();
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Save settings back to ini file.
        /// </summary>
        public void SaveSettings()
        {
            SaveSettings(iniFilePath);
        }
    }



    using System.Collections.Generic;
using Byui.Games.Scripting;


namespace Byui.Games.Directing
{
    /// <summary>
    /// Controls the sequence and pacing of the game.
    /// </summary>
    public class Director2 : IActionCallback
    {
        private const int DefaultFramesPerSecond = 60;

        private Clock _clock = new Clock(DefaultFramesPerSecond);
        private Scene _scene = new Scene();
        private Statistics _statistics = new Statistics();

        public Director2(Scene scene)
        {
            _scene = scene;
        }

        public void OnDebug(string message)
        {
            System.Console.Out.WriteLine($"DEBUG: {message}");
        }

        public void OnError(string message, System.Exception exception)
        {
            _clock.Stop();
            System.Console.Error.WriteLine($"ERROR: {message}");
            System.Console.Error.WriteLine(exception.Message);
            System.Console.Error.WriteLine(exception.StackTrace);
        }

        public void OnStop()
        {
            _clock.Stop();
            System.Console.WriteLine("** Game Stopped **");
            
        }

        public void StartGame()
        {
            // load phase
            _clock.Start();
            ExecuteActions(Phase.Load);

            while (_clock.IsRunning())
            {
                // input phase
                _clock.AddTime();
                ExecuteActions(Phase.Input);

                // update phase
                while (_clock.HasTime())
                {
                    ExecuteActions(Phase.Update);
                    _clock.UseTime();
                }

                // output phase
                ExecuteActions(Phase.Output);
                _scene.ApplyChanges();

                // finish frame
                _clock.UpdateStatistics(_statistics);
                _scene.UpdateStatistics(_statistics);
            }

            // unload phase
            ExecuteActions(Phase.Unload);
        }

        private void ExecuteActions(int phase)
        {
            List<Action> actions = _scene.GetAllActionsIn(phase);
            foreach(Action action in actions)
            {
                action.Execute(_scene, this);
            }
        }
    }
}


using System;


namespace Byui.Games.Scripting
{
    /// <summary>
    /// A simulation clock.
    /// </summary>
    class Clock
    {
        private float _availableSeconds;
        private float _frameDurationInSeconds;
        private int _numOfFrames;
        private DateTime _previousTime;
        private bool _running;
        private DateTime _startTime;
        private int _numOfUpdates;

        public Clock(int framesPerSecond)
        {
            _availableSeconds = 0f;
            _frameDurationInSeconds = 1f / framesPerSecond;
            _numOfFrames = 0;
            _previousTime = DateTime.Now.ToUniversalTime();
            _running = false;
            _startTime = DateTime.Now.ToUniversalTime();;
            _numOfUpdates = 0;
        }

        public void AddTime()
        {
            DateTime currentTime = DateTime.Now.ToUniversalTime();
            TimeSpan elapsedTime = currentTime - _previousTime;
            _previousTime = currentTime;
            _availableSeconds += (float)elapsedTime.TotalSeconds;
            _numOfFrames++;
        }

        public bool HasTime()
        {
            return _availableSeconds >= _frameDurationInSeconds;
        }

        public bool IsRunning()
        {
            return _running;
        }

        public void Start()
        {
            _running = true;
            _startTime = DateTime.Now.ToUniversalTime();
        }

        public void Stop()
        {
            _running = false;
        }

        public void UpdateStatistics(Statistics statistics)
        {
            DateTime currentTime = DateTime.Now.ToUniversalTime();
            TimeSpan elapsedTime = currentTime - _startTime;
            statistics.Alpha = _availableSeconds / _frameDurationInSeconds;
            statistics.FramesPerSecond = _numOfFrames / (float)elapsedTime.TotalSeconds;
            statistics.UpdatesPerSecond = _numOfUpdates / (float)elapsedTime.TotalSeconds;
        }

        public void UseTime()
        {
            _availableSeconds -= _frameDurationInSeconds;
            _numOfUpdates++;
        }
    }
}






public bool IsAbove(RigidBody other)
        {
            Validator.CheckNotNull(other);
            return this.GetTop() < other.GetTop();
        }

        public bool IsBelow(RigidBody other)
        {
            Validator.CheckNotNull(other);
            return this.GetBottom() > other.GetBottom();
        }

        public bool IsLeftOf(RigidBody other)
        {
            Validator.CheckNotNull(other);
            return this.GetLeft() < other.GetLeft();
        }

public bool IsRightOf(RigidBody other)
        {
            Validator.CheckNotNull(other);
            return this.GetRight() > other.GetRight();
        }





        using System;
using System.Collections.Generic;
using Byui.Games.Casting;
using Byui.Games.Scripting;
using Byui.Games.Services;
using Pong.Game.Casting;


namespace Pong.Game.Scripting
{
    public class DrawActorsAction : Core.Scripting.Action
    {
        private IVideoService _videoService;

        public DrawActorsAction(IServiceFactory serviceFactory)
        {
            _videoService = serviceFactory.GetVideoService();
        }

        public override void Execute(Scene scene, IActionCallback callback)
        {
            try
            {
                _videoService.ClearBuffer();
                DrawBackground(scene);
                // DrawPaddles(scene);
                _videoService.FlushBuffer();
            }
            catch (Exception exception)
            {
                callback.OnError("Couldn't draw actors.", exception);
            }
        }

        private void DrawBackground(Scene scene)
        {
            Image background = (Image)scene.GetFirstActorIn("background.group");
            _videoService.Draw(background);
        }

        private void DrawPaddles(Scene scene)
        {
            List<Actor> actors = scene.GetAllActorsIn("paddle.group");
            foreach (Actor actor in actors)
            {
                Paddle paddle = (Paddle)actor;
                _videoService.Draw(paddle);
            }
        }

    }
}



namespace Byui.Games.Casting
{
    /// <summary>
    /// A text font.
    /// </summary>
    public class Font
    {
        private Color _color = Color.White();
        private string _file = string.Empty;
        private float _size = 12f;
        
        public Font() { }

        public Color GetColor()
        {
            return _color;
        }

        public string GetFile()
        {
            return _file;
        }

        public float GetSize()
        {
            return _size;
        }

        public void SetColor(Color color)
        {
            Validator.CheckNotNull(color);
            _color = color;
        }

        public void SetFile(string file)
        {
            Validator.CheckNotBlank(file);
            _file = file;
        }

        public void SetSize(float size)
        {
            Validator.CheckGreaterThan(size, 0);
            _size = size;
        }
    }
}




            using (var streamReader = new StreamReader(_filepath))
            {
                string line = streamReader.ReadLine();
                while (line != null)
                {
                    if (line != string.Empty && !line.StartsWith("#"))
                    {
                        string[] pair = line.Split("=");
                        string key = pair[0].Trim();
                        string value = pair[1].Trim();
                         _settings.Add(key, value);
                    }
                    line = streamReader.ReadLine();
                }
            }